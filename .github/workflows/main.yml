name: Build, Test, Package and Push

on:
  # Triggers the workflow on pull request events and merges/pushes to main
  push:
    branches:
      - 'octopus'
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    # Daily 5am australian/brisbane time
    - cron: '0 19 * * *'

env:
  OCTOVERSION_CurrentBranch: ${{ github.head_ref || github.ref }} # For pull_request events we override the /refs/pull/xx/merge branch to the PR's head branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      
      # Adjustment is done prior to Nuke build as OCTOVERSION information is included in the result package.
      - name: Append OCTOVERSION_CurrentBranch with -nightly (for scheduled)
        if: github.event_name != 'schedule'
        run: echo "OCTOVERSION_CurrentBranch=${{ env.OCTOVERSION_CurrentBranch }}-nightly" >> $GITHUB_ENV

      - name: Nuke Build 🏗
        id: build
        shell: bash                
        env:          
          OCTOVERSION_Patch: ${{ github.run_number }} # Pass patch number to Nuke OctoVersion
        run: ./build.sh

      - name: Linux unit test report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Linux unit test results
          path: ./TestResults/*.trx
          reporter: dotnet-trx
          fail-on-error: true
        
      - name: Tag release (when not pre-release) 🏷️
        id: github-tag        
        if: ${{ github.event_name != 'schedule' && !contains( steps.build.outputs.octoversion_fullsemver, '-' ) }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.build.outputs.octoversion_fullsemver }}",
              sha: context.sha
            })

      - name: Install Octopus CLI 🐙
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
      
      - name: Push to Octopus 🐙
        uses: OctopusDeploy/push-package-action@v1
        with:
          server: ${{ secrets.DEPLOY_URL }}
          space: Core Platform
          api_key: ${{ secrets.DEPLOY_API_KEY }}
          packages: |
            ./artifacts/NCrontab.Advanced.${{ steps.build.outputs.octoversion_fullsemver }}.nupkg

      - name: Create Release in Octopus 🐙
        uses: OctopusDeploy/create-release-action@v1
        with:
          server: ${{ secrets.DEPLOY_URL }}
          space: Core Platform
          api_key: ${{ secrets.DEPLOY_API_KEY }}
          project: "Ncron.Advanced"
          packages: |
            NCrontab.Advanced:${{ steps.build.outputs.octoversion_fullsemver }}
